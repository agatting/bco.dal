/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dc.bco.dal.visual.util;

/*
 * #%L
 * DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2016 DivineCooperation
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import org.dc.jul.exception.MultiException;
import org.dc.jul.pattern.Observable;
import org.dc.jul.pattern.Observer;
import java.awt.Color;
import org.slf4j.LoggerFactory;
import rsb.Scope;

/**
 *
 * @author nuc
 */
public class RSBScopePanel extends javax.swing.JPanel {

    protected final org.slf4j.Logger logger = LoggerFactory.getLogger(getClass());

    private Observable<Scope> observable;

    /**
     * Creates new form ScopePanel
     */
    public RSBScopePanel() {
        initComponents();
        observable = new Observable<>();
    }

    public void addObserver(Observer<Scope> observer) {
        observable.addObserver(observer);
    }

    public void removeObserver(Observer<Scope> observer) {
        observable.removeObserver(observer);
    }

    public Scope getScope() {
        return new Scope(scopeTextField.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scopeLabel = new javax.swing.JLabel();
        scopeTextField = new javax.swing.JTextField();

        scopeLabel.setText("Scope:");

        scopeTextField.setText("/home/control/ambientlight/TestUnit_0");
        scopeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scopeTextFieldActionPerformed(evt);
            }
        });
        scopeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                scopeTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scopeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scopeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scopeLabel)
                    .addComponent(scopeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scopeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scopeTextFieldActionPerformed

        scopeTextField.setForeground(Color.BLUE);
        scopeTextField.setEnabled(false);

        try {
            //        SwingWorker worker = new SwingWorker<Void, Void>() {
//
//            @Override
//            protected Void doInBackground() throws Exception {
//                try {
//                    observable.notifyObservers(new Scope(scopeTextField.getText()));
//                    scopeTextField.setForeground(Color.RED);
//                    scopeTextField.setEnabled(true);
//                } catch (MultiException ex) {
//                    logger.error("Could not update scope!", ex);
//                }
//                return null;
//            }
//        };
//        worker.addPropertyChangeListener(new PropertyChangeListener() {
//
//            @Override
//            public void propertyChange(PropertyChangeEvent evt) {
//                if (evt.getPropertyName().equals("state")) {
//                    switch ((SwingWorker.StateValue) evt.getNewValue()) {
//                        
//                        case STARTED:
//                            break;
//                        case PENDING:
//                            break;
//                        case DONE:
//                            scopeTextField.setForeground(Color.GREEN.darker());
//                            scopeTextField.setEnabled(true);
//                            break;
//                        default:
//                            throw new AssertionError("Unknown SwingWorker state!");
//                    }
//                }
//            }
//        });
//        worker.execute();

            observable.notifyObservers(new Scope(scopeTextField.getText()));
            scopeTextField.setForeground(Color.GREEN.darker().darker().darker());
            scopeTextField.setEnabled(true);
        } catch (MultiException ex) {
            scopeTextField.setForeground(Color.RED);
            scopeTextField.setEnabled(true);
        }

    }//GEN-LAST:event_scopeTextFieldActionPerformed

    private void scopeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scopeTextFieldKeyTyped
        scopeTextField.setForeground(Color.BLUE);
    }//GEN-LAST:event_scopeTextFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel scopeLabel;
    private javax.swing.JTextField scopeTextField;
    // End of variables declaration//GEN-END:variables
}
